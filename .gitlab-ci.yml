image: docker:19.03.12

stages:
  - build
  - test
  - deploy
  - release

variables:
  DOCKER_REGISTRY: registry.gitlab.com/nha3/tronql
  DOCKER_REGISTRY_TRON: registry.gitlab.com/nha3/tronql/tron-node
  DOCKER_REGISTRY_ROUTER: registry.gitlab.com/nha3/tronql/tron-router
  DOCKER_REGISTRY_DASHBOARD: registry.gitlab.com/nha3/tronql/tron-dashboard
  DOCKER_REGISTRY_DASHBOARD_ROUTER: registry.gitlab.com/nha3/tronql/tron-dashboard-router

  DOCKER_HOST: tcp://dockerdind:2375/
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""

  AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
  AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
  AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION

  REACT_APP_AWS_REGION: $REACT_APP_AWS_REGION
  REACT_APP_AWS_POOL_ID: $REACT_APP_AWS_POOL_ID
  REACT_APP_AWS_POOL_CLIENT_ID: $REACT_APP_AWS_POOL_CLIENT_ID
  REACT_APP_GRAPHQL_ENDPOINT: $REACT_APP_GRAPHQL_ENDPOINT

# build-tron-nile:
#   rules:
#     - if: $CI_COMMIT_TAG
#   stage: build
#   before_script:
#     - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
#   services:
#     - name: docker:19.03.12-dind
#       alias: dockerdind
#   script:
#     - cd nile/
#     - docker build --network host --no-cache -t $DOCKER_REGISTRY_TRON:nile .
#     - docker push $DOCKER_REGISTRY_TRON:nile

# build-tron:
#   rules:
#     - if: $CI_COMMIT_TAG
#   stage: build
#   before_script:
#     - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
#   services:
#     - name: docker:19.03.12-dind
#       alias: dockerdind
#   script:
#     - cd mainnet/
#     - docker build --network host --no-cache -t $DOCKER_REGISTRY_TRON:mainnet .
#     - docker push $DOCKER_REGISTRY_TRON:mainnet

# build-nile:
#   stage: build
#   only:
#     - nile
#   before_script:
#     - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
#   services:
#     - name: docker:19.03.12-dind
#       alias: dockerdind
#   script:
#     - cd app
#     - docker build --network host --no-cache -t $DOCKER_REGISTRY:nile .
#     - docker push $DOCKER_REGISTRY:nile

# build-router-nile:
#   stage: build
#   only:
#     - nile
#   before_script:
#     - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
#   services:
#     - name: docker:19.03.12-dind
#       alias: dockerdind
#   script:
#     - cd app
#     - docker build --network host -f Dockerfile.router -t $DOCKER_REGISTRY_ROUTER:nile .
#     - docker push $DOCKER_REGISTRY_ROUTER:nile

build:
  stage: build
  rules:
    - if: '$CI_COMMIT_TAG == null'
  before_script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
  services:
    - name: docker:19.03.12-dind
      alias: dockerdind
  script:
    - cd app
    - docker build --network host --no-cache -t $DOCKER_REGISTRY:$CI_COMMIT_SHORT_SHA .
    - docker push $DOCKER_REGISTRY:$CI_COMMIT_SHORT_SHA

build-router:
  stage: build
  rules:
    - if: $CI_COMMIT_TAG
  before_script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
  services:
    - name: docker:19.03.12-dind
      alias: dockerdind
  script:
    - cd app
    - docker build --network host -f Dockerfile.router -t $DOCKER_REGISTRY_ROUTER:$CI_COMMIT_SHORT_SHA .
    - docker push $DOCKER_REGISTRY_ROUTER:$CI_COMMIT_SHORT_SHA

build-dashboard-router:
  stage: build
  rules:
    - if: $CI_COMMIT_TAG
  before_script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
  services:
    - name: docker:19.03.12-dind
      alias: dockerdind
  script:
    - cd dashboard
    - docker build --network host -f Dockerfile.router -t $DOCKER_REGISTRY_DASHBOARD_ROUTER:$CI_COMMIT_SHORT_SHA .
    - docker push $DOCKER_REGISTRY_DASHBOARD_ROUTER:$CI_COMMIT_SHORT_SHA

build-dashboard:
  stage: build
  rules:
    - if: '$CI_COMMIT_TAG == null'
  before_script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
  services:
    - name: docker:19.03.12-dind
      alias: dockerdind
  script:
    - cd dashboard
    - docker build --network host -f Dockerfile -t $DOCKER_REGISTRY_DASHBOARD:$CI_COMMIT_SHORT_SHA .
    - docker push $DOCKER_REGISTRY_DASHBOARD:$CI_COMMIT_SHORT_SHA

deploy_cdn:
  stage: deploy
  image: node:18
  rules:
    - if: $CI_COMMIT_TAG
  before_script:
    - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    - unzip -q awscliv2.zip
    - ./aws/install
  script:
    - cd src/
    - npm i
    - npm run deploy

helm_build:
  image:
    name: alpine/helm:3.6.3
    entrypoint: [""]
  rules:
    - if: $CI_COMMIT_TAG
  stage: build
  script:
    - 'sed -i "s/tag: prod/tag: ''$CI_COMMIT_SHORT_SHA''/" k8s/mainnet/values.yaml'
    - helm package k8s/mainnet/ --version=$CI_COMMIT_TAG
  artifacts:
    paths:
      - tronql-$CI_COMMIT_TAG.tgz
    expire_in: 6 hours

helm_deploy:
  image: curlimages/curl:7.81.0
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo $CI_COMMIT_TAG
    - 'curl --request POST --user gitlab-ci-token:$CI_JOB_TOKEN --form "chart=@tronql-$CI_COMMIT_TAG.tgz" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/api/stable/charts"'

make_release:
  image: node:18-buster-slim
  stage: release
  before_script:
    - apt-get update && apt-get install -y --no-install-recommends git-core ca-certificates
    - npm install -g semantic-release @semantic-release/gitlab
  script:
    - semantic-release --plugins @semantic-release/gitlab @semantic-release/release-notes-generator @semantic-release/commit-analyzer --branches mainnet
  only:
    - mainnet

test-dashboard:
  image: $DOCKER_REGISTRY_DASHBOARD:$CI_COMMIT_SHORT_SHA
  rules:
    - if: '$CI_COMMIT_TAG == null'
  stage: test
  variables:
    POSTGRESQL_PASSWORD: tronql
    POSTGRES_DB: tronql
    POSTGRES_USER: tronql
    POSTGRES_PASSWORD: tronql
    DATABASE_URL: postgresql+asyncpg://tronql:tronql@postgresql:5432/tronql
    FUSION_API_KEY: skladfj;alskdjf;alskdjf
    FUSION_API_URL: http://fusionauth.localhost
    FUSION_APP_ID: 0507d222-5c4c-43df-bf8c-1650f3e58383
    REDIS_URL: redis://redis
  services:
    - name: bitnami/postgresql:14.4.0
      alias: postgresql
    - name: bitnami/redis:6.0.9
      alias: redis
  before_script:
    - /opt/venv/bin/pip install --no-cache-dir -r ./dashboard/dev-requirements.txt
  script:
    - cd dashboard/
    - pytest
  coverage: '/Total coverage\: (\d+\.\d+\%)/'
